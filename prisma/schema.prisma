generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  email            String    @unique
  password         String
  creationDate     DateTime  @default(dbgenerated("CURRENT_DATE")) @map("creation_date") @db.Timestamptz(6)
  modificationDate DateTime  @updatedAt @map("modification_date") @db.Timestamptz(6)
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  id               String    @id @default(uuid()) @db.Uuid
  project          project[]
  task             task[]

  @@map("registered_user")
}

model project {
  name             String
  description      String?
  creationDate     DateTime @default(dbgenerated("CURRENT_DATE")) @map("creation_date") @db.Timestamptz(6)
  modificationDate DateTime @updatedAt @map("modification_date") @db.Timestamptz(6)
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  user             user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task             task[]
}

model task {
  name                 String
  description          String?
  startDate            DateTime?   @map("start_date") @db.Timestamptz(6)
  estCompletionDate    DateTime?   @map("estimated_completion_date") @db.Timestamptz(6)
  actualCompletionDate DateTime?   @map("actual_completion_date") @db.Timestamptz(6)
  isDelayed            Boolean?    @map("is_delayed")
  creationDate         DateTime    @default(dbgenerated("CURRENT_DATE")) @map("creation_date") @db.Timestamptz(6)
  modificationDate     DateTime    @updatedAt @map("modification_date") @db.Timestamptz(6)
  id                   String      @id @default(uuid()) @db.Uuid
  userId               String      @map("user_id") @db.Uuid
  projectId            String      @map("project_id") @db.Uuid
  statusId             String      @map("status_id") @db.Uuid
  project              project     @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "project_id")
  taskStatus           taskStatus  @relation(fields: [statusId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "status_id")
  user                 user        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model taskStatus {
  id         String @id @default(uuid()) @db.Uuid
  definition String
  task       task[]
  
  @@map("task_status")
}
